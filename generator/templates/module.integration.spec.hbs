import { Test, TestingModule } from '@nestjs/testing';
import { DataType, newDb } from 'pg-mem';
import { TypeOrmModule } from '@nestjs/typeorm';
import { DataSource } from 'typeorm';
import { v4 } from 'uuid';
import { join } from 'path';
import { HttpStatus, INestApplication } from '@nestjs/common';
import { {{pascalCase tableName}}Module } from './{{tableName}}.module';
import * as request from 'supertest';
import { GraphQLModule } from '@nestjs/graphql';
import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';
import { ConfigModule } from '@nestjs/config';
import { getEnvPath } from '../common/helper/env.helper';
import { formatError } from 'src/common/format/graphql-error.format';
import GraphQLJSON from 'graphql-type-json';
import { GraphqlPassportAuthGuard } from 'src/common/guards/graphql-passport-auth.guard';
import { Create{{pascalCase tableName}}Input, Update{{pascalCase tableName}}Input } from './inputs/{{tableName}}.input';
import { GetOneInput } from 'src/common/graphql/custom.input';

describe('{{pascalCase tableName}}Module', () => {
  let app: INestApplication;
{{#if (is "increment" idType)}}
  let savedId: number;
{{else}}
  let savedId: string;
{{/if}}

  beforeAll(async ()=>{
    const db = newDb({
      autoCreateForeignKeyIndices: true,
    });

    db.public.registerFunction({
      name: 'current_database',
      implementation: () => 'test',
    });

    db.public.registerFunction({
      name: 'obj_description',
      args: [DataType.text, DataType.text],
      returns: DataType.text,
      implementation: () => 'test',
    });

    db.public.registerFunction({
      name: 'version',
      implementation: () => '{{tableName}}',
    });

    db.registerExtension('uuid-ossp', (schema) => {
      schema.registerFunction({
        name: 'uuid_generate_v4',
        returns: DataType.uuid,
        implementation: v4,
        impure: true,
      });
    });

    const datasource = await db.adapters.createTypeormDataSource({
      type: 'postgres',
      entities: [join(process.cwd(), 'src', '**', '*.entity.{ts,js}')],
      autoLoadEntities: true,
    });

    await datasource.initialize();

    await datasource.synchronize();

    const module: TestingModule = await Test.createTestingModule({
      imports: [
        TypeOrmModule.forRoot(),
        ConfigModule.forRoot({
          isGlobal: true,
          envFilePath: getEnvPath(process.cwd()),
        }),
        GraphQLModule.forRootAsync<ApolloDriverConfig>({
          driver: ApolloDriver,
          useFactory: () => ({
            context: ({ req }) => ({ req }),
            cache: 'bounded',
            formatError,
            resolvers: { JSON: GraphQLJSON },
            autoSchemaFile: join(process.cwd(), 'test/graphql-schema.gql'),
            sortSchema: true,
          }),
        }),
        {{pascalCase tableName}}Module,
      ],
    })
      .overrideProvider(DataSource)
      .useValue(datasource)
      .overrideGuard(GraphqlPassportAuthGuard)
      .useValue({ canActivate: () => true })
      .compile();

    app = module.createNestApplication();

    await app.init();
  });

  afterAll(async () => {
    await app.close();
  });

  const created = {
    {{columnName}}: 
{{#if (is "string" columnType)}}
  'sampleString'
{{/if}}

{{#if (is "number" columnType)}}
  1
{{/if}}

{{#if (is "boolean" columnType)}}
  true
{{/if}}

  };
  it('create', async () => {
    const keyName = 'create{{pascalCase tableName}}';
  
    const gqlQuery = {
      query: `
        mutation ($input: ${Create{{pascalCase tableName}}Input.prototype.constructor.name}!) {
          ${keyName}(input: $input) {
            id
            ${Object.keys(created).join('\n')},
          }
        }
      `,
      variables: {
        input: created,
      },
    };
  
    await request(app.getHttpServer())
      .post('/graphql')
      .send(gqlQuery)
      .set('Content-Type', 'application/json')
      .expect(HttpStatus.OK)
      .expect(({ body: { data } }) => {
        const { id } = data[keyName];
{{#if (is "increment" idType)}}
        savedId = Number(id)
{{else}}
        savedId = id
{{/if}}
        expect(data[keyName]).toMatchObject(created);
      });
  });
  
  it('getMany', async () => {
    const keyName = 'getMany{{pascalCase tableName}}List';
  
    const gqlQuery = {
      query: `,
        query {
          ${keyName}{,
            data {
            ${Object.keys(created).join('\n')},
            }
          }
        }
      `,
    };
  
    await request(app.getHttpServer())
      .post('/graphql')
      .send(gqlQuery)
      .set('Content-Type', 'application/json')
      .expect(HttpStatus.OK)
      .expect(({ body: { data } }) => {
        expect(data[keyName]).toMatchObject({ data: [created] });
      });
  });
  
  it('getOne', async () => {
    const keyName = 'getOne{{pascalCase tableName}}';
  
    const gqlQuery = {
      query: `,
        query ($input: ${GetOneInput.prototype.constructor.name}!) {,
          ${keyName} (input:$input) {,
            ${Object.keys(created).join('\n')},
          }
        }
      `,
      variables: {
        input: {
          where: created,
        },
      },
    };
  
    await request(app.getHttpServer())
      .post('/graphql')
      .send(gqlQuery)
      .set('Content-Type', 'application/json')
      .expect(HttpStatus.OK)
      .expect(({ body: { data } }) => {
        expect(data[keyName]).toMatchObject(created);
      });
  });
  
  it('update', async () => {
    const keyName = 'update{{pascalCase tableName}}';
  
    const gqlQuery = {
      query: `,
        mutation ($id: 
{{#if (is "increment" idType)}}
        Float
{{else}}
        String
{{/if}}
        !, $input: ${Update{{pascalCase tableName}}Input.prototype.constructor.name}!) {,
          ${keyName}(id: $id, input: $input),
        }
      `,
      variables: {
        id: savedId,
        input: created
      },
    };
  
    await request(app.getHttpServer())
      .post('/graphql')
      .send(gqlQuery)
      .set('Content-Type', 'application/json')
      .expect(HttpStatus.OK)
      .expect(({ body: { data } }) => {
        expect(data[keyName].affected).toBe(1);
      });
  });
  
  it('delete', async () => {
    const keyName = 'delete{{pascalCase tableName}}';
  
    const gqlQuery = {
      query: `,
        mutation ($id: 
{{#if (is "increment" idType)}}
        Float
{{else}}
        String
{{/if}}
        !) {
          ${keyName}(id: $id),
        }
     `,
      variables: {
        id: savedId,
      },
    };
  
    await request(app.getHttpServer())
      .post('/graphql')
      .send(gqlQuery)
      .set('Content-Type', 'application/json')
      .expect(HttpStatus.OK)
      .expect(({ body: { data } }) => {
        expect(data[keyName].affected).toBe(1);
      });
  });
});